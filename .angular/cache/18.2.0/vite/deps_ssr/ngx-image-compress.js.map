{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-image-compress/fesm2022/ngx-image-compress.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, ViewChild, Component, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * EXIF tag standard reference\n *\n * Tag Name: Orientation\n * Tag ID: 0x0112\n * Writable: int16u\n * Group: IFD0\n * Values:\n 1 = Horizontal (normal)\n 2 = Mirror horizontal\n 3 = Rotate 180\n 4 = Mirror vertical\n 5 = Mirror horizontal and rotate 270 CW\n 6 = Rotate 90 CW\n 7 = Mirror horizontal and rotate 90 CW\n 8 = Rotate 270 CW\n */\nconst _c0 = [\"video\"];\nconst _c1 = [[[\"\", \"openStreamBtn\", \"\"]], [[\"\", \"acquireImageBtn\", \"\"]]];\nconst _c2 = [\"[openStreamBtn]\", \"[acquireImageBtn]\"];\nfunction NgxImageCaptureComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 3);\n    i0.ɵɵlistener(\"click\", function NgxImageCaptureComponent_span_0_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.startVideoCapture());\n    });\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NgxImageCaptureComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 3);\n    i0.ɵɵlistener(\"click\", function NgxImageCaptureComponent_span_1_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.acquireImage());\n    });\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NgxImageCaptureComponent_video_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"video\", 4, 0);\n  }\n}\nvar DOC_ORIENTATION;\n(function (DOC_ORIENTATION) {\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Up\"] = 1] = \"Up\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Down\"] = 3] = \"Down\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Right\"] = 6] = \"Right\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Left\"] = 8] = \"Left\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"UpMirrored\"] = 2] = \"UpMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"DownMirrored\"] = 4] = \"DownMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"LeftMirrored\"] = 5] = \"LeftMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"RightMirrored\"] = 7] = \"RightMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Default\"] = 0] = \"Default\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"NotJpeg\"] = -1] = \"NotJpeg\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"NotDefined\"] = -2] = \"NotDefined\";\n})(DOC_ORIENTATION || (DOC_ORIENTATION = {}));\nclass ImageCompress {\n  constructor() {\n    this.byteCount = imgString => encodeURI(imgString).split(/%..|./).length - 1;\n  }\n  getOrientation(file) {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const view = new DataView(reader.result);\n          if (!view.byteLength) {\n            return resolve(DOC_ORIENTATION.NotDefined);\n          }\n          if (view.getUint16(0, false) !== 0xffd8) {\n            return resolve(DOC_ORIENTATION.NotDefined);\n          }\n          const length = view.byteLength;\n          let offset = 2;\n          while (offset < length) {\n            const marker = view.getUint16(offset, false);\n            offset += 2;\n            if (marker === 0xffe1) {\n              if (view.getUint32(offset += 2, false) !== 0x45786966) {\n                return resolve(DOC_ORIENTATION.NotJpeg);\n              }\n              const little = view.getUint16(offset += 6, false) === 0x4949;\n              offset += view.getUint32(offset + 4, little);\n              const tags = view.getUint16(offset, little);\n              offset += 2;\n              for (let i = 0; i < tags; i++) {\n                if (view.getUint16(offset + i * 12, little) === 0x0112) {\n                  return resolve(view.getUint16(offset + i * 12 + 8, little));\n                }\n              }\n            } else if ((marker & 0xff00) !== 0xff00) {\n              break;\n            } else {\n              offset += view.getUint16(offset, false);\n            }\n          }\n          return resolve(DOC_ORIENTATION.NotJpeg);\n        };\n        reader.readAsArrayBuffer(file);\n      } catch (e) {\n        return reject(DOC_ORIENTATION.Default);\n      }\n    });\n  }\n  uploadFile(render, multiple = true, rejectOnCancel = false) {\n    return new Promise((resolve, reject) => {\n      const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n      const isIOS = /iPad|iPhone|iPod/i.test(navigator.userAgent);\n      Promise.resolve(isSafari || isIOS).then(onlyNative => {\n        if (onlyNative) {\n          return this.generateUploadInputNative(window.document, multiple, rejectOnCancel);\n        } else {\n          return this.generateUploadInputRenderer(render, multiple, rejectOnCancel);\n        }\n      }).then(filesList => {\n        const files = filesList ? Array.from(filesList) : [];\n        const orientationPromises = files.map(file => this.getOrientation(file));\n        const readerPromises = files.map(file => this.fileToDataURL(file));\n        let orientationsResult = [];\n        Promise.all(orientationPromises).then(orientations => {\n          orientationsResult = orientations;\n          return Promise.all(readerPromises);\n        }).then(readerResult => {\n          const resultArray = readerResult.map((parsedFile, index) => ({\n            image: parsedFile.dataUrl,\n            orientation: orientationsResult[index],\n            fileName: parsedFile.fileName\n          }));\n          if (multiple) {\n            resolve(resultArray);\n          } else {\n            resolve(resultArray[0]);\n          }\n        });\n      }).catch(err => reject(err));\n    });\n  }\n  fileToDataURL(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        //myReader.onloadend = (progressEvent: ProgressEvent<FileReader>)\n        resolve({\n          dataUrl: e.target.result,\n          fileName: file.name\n        });\n      };\n      try {\n        reader.readAsDataURL(file);\n      } catch (e) {\n        reject(`ngx-image-compress - probably no file have been selected: ${e}`);\n      }\n    });\n  }\n  generateUploadInputRenderer(render, multiple = true, rejectOnCancel = false) {\n    let lock = false;\n    return new Promise((resolve, reject) => {\n      const inputElement = render.createElement('input');\n      render.setStyle(inputElement, 'display', 'none');\n      render.setProperty(inputElement, 'type', 'file');\n      render.setProperty(inputElement, 'accept', 'image/*, .heic');\n      if (multiple) {\n        render.setProperty(inputElement, 'multiple', 'true');\n      }\n      render.listen(inputElement, 'click', $event => {\n        $event.target.value = '';\n      });\n      render.listen(inputElement, 'change', $event => {\n        lock = true;\n        const files = $event.target.files;\n        resolve(files);\n      });\n      if (rejectOnCancel) {\n        window.addEventListener('focus', () => {\n          setTimeout(() => {\n            if (!lock) {\n              reject(new Error('file upload on blur - no file selected'));\n            }\n          }, 300);\n        }, {\n          once: true\n        });\n      }\n      inputElement.click();\n    });\n  }\n  generateUploadInputNative(documentNativeApi, multiple = true, rejectOnCancel = false) {\n    let lock = false;\n    return new Promise((resolve, reject) => {\n      const inputElement = documentNativeApi.createElement('input');\n      inputElement.id = 'upload-input' + new Date();\n      inputElement.style.display = 'none';\n      inputElement.setAttribute('type', 'file');\n      inputElement.setAttribute('accept', 'image/*, .heic');\n      if (multiple) {\n        inputElement.setAttribute('multiple', 'true');\n      }\n      documentNativeApi.body.appendChild(inputElement);\n      inputElement.addEventListener('change', () => {\n        lock = true;\n        resolve(inputElement.files);\n        documentNativeApi.body.removeChild(documentNativeApi.getElementById(inputElement.id));\n      }, {\n        once: true\n      });\n      if (rejectOnCancel) {\n        window.addEventListener('focus', () => {\n          setTimeout(() => {\n            if (!lock && documentNativeApi.getElementById(inputElement.id)) {\n              reject(new Error('file upload on blur - no file selected'));\n              documentNativeApi.body.removeChild(documentNativeApi.getElementById(inputElement.id));\n            }\n          }, 300);\n        }, {\n          once: true\n        });\n      }\n      // open file select box\n      inputElement.click();\n    });\n  }\n  compress(imageDataUrlSource, orientation, render, ratio = 50, quality = 50, maxwidth = 0, maxheight = 0) {\n    return new Promise(function (resolve, reject) {\n      quality = quality / 100;\n      ratio = ratio / 100;\n      const sourceImage = new Image();\n      // important for safari: we need to wait for onload event\n      sourceImage.onload = () => {\n        const canvas = render.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          return reject(`No canvas context available`);\n        }\n        let w = sourceImage.naturalWidth;\n        let h = sourceImage.naturalHeight;\n        if (!CSS.supports('image-orientation', 'from-image')) {\n          if (orientation === DOC_ORIENTATION.Right || orientation === DOC_ORIENTATION.Left) {\n            const t = w;\n            w = h;\n            h = t;\n          }\n        }\n        const xratio = maxwidth ? maxwidth / w : 1;\n        const yratio = maxheight ? maxheight / h : 1;\n        ratio = Math.min(ratio, xratio, yratio);\n        canvas.width = w * ratio;\n        canvas.height = h * ratio;\n        const TO_RADIANS = Math.PI / 180;\n        if (CSS.supports('image-orientation', 'from-image') || orientation === DOC_ORIENTATION.Up) {\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n        } else if (orientation === DOC_ORIENTATION.Right) {\n          ctx.save();\n          ctx.rotate(90 * TO_RADIANS);\n          ctx.translate(0, -canvas.width);\n          ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n          ctx.restore();\n        } else if (orientation === DOC_ORIENTATION.Left) {\n          ctx.save();\n          ctx.rotate(-90 * TO_RADIANS);\n          ctx.translate(-canvas.width, 0);\n          ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n          ctx.restore();\n        } else if (orientation === DOC_ORIENTATION.Down) {\n          ctx.save();\n          ctx.rotate(180 * TO_RADIANS);\n          ctx.translate(-canvas.width, -canvas.height);\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        } else {\n          // no orientation value found - same as default UP\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n        }\n        const mime = imageDataUrlSource.substr(5, imageDataUrlSource.split(';')[0].length - 5);\n        // TODO test on mime\n        const result = canvas.toDataURL(mime, quality);\n        resolve(result);\n      };\n      sourceImage.onerror = e => reject(e);\n      sourceImage.src = imageDataUrlSource;\n    });\n  }\n  async uploadGetImageMaxSize(maxSizeMb, debugMode, render, rejectOnCancel = false) {\n    if (debugMode) {\n      console.debug('Ngxthis - Opening upload window');\n    }\n    const myFile = await this.uploadFile(render, false, rejectOnCancel);\n    return await this.getImageMaxSize(myFile, maxSizeMb, debugMode, render);\n  }\n  async getImageMaxSize(myFile, maxSizeMb, debugMode, render) {\n    const MAX_TRIES = 10;\n    const bytesToMB = bytes => (bytes / 1024 / 1024).toFixed(2);\n    if (debugMode) {\n      console.debug('Ngxthis - Opening upload window');\n    }\n    let compressedFile;\n    for (let i = 0; i < MAX_TRIES; i++) {\n      const previousSize = this.byteCount(myFile.image);\n      compressedFile = await this.compress(myFile.image, myFile.orientation, render, 50, 100);\n      const newSize = this.byteCount(compressedFile);\n      console.debug('Ngxthis -', 'Compression from', bytesToMB(previousSize), 'MB to', bytesToMB(newSize), 'MB');\n      if (newSize >= previousSize) {\n        if (i === 0) {\n          if (debugMode) {\n            console.debug('Ngxthis -', \"File can't be reduced at all - returning the original\", bytesToMB(previousSize), 'MB large');\n          }\n          throw {\n            ...myFile,\n            image: compressedFile\n          };\n        } else {\n          if (debugMode) {\n            console.debug('Ngxthis -', \"File can't be reduced more - returning the best we can, which is \", bytesToMB(previousSize), 'MB large');\n          }\n          throw {\n            ...myFile,\n            image: compressedFile\n          };\n        }\n      } else {\n        if (newSize < maxSizeMb * 1024 * 1024) {\n          if (debugMode) {\n            console.debug('Ngxthis -', 'Here your file', bytesToMB(newSize), 'MB large');\n          }\n          return {\n            ...myFile,\n            image: compressedFile\n          };\n        } else if (i === 9) {\n          if (debugMode) {\n            console.debug('Ngxthis -', \"File can't reach the desired size after\", MAX_TRIES, 'tries. Returning file ', bytesToMB(previousSize), 'MB large');\n          }\n          throw {\n            ...myFile,\n            image: compressedFile\n          };\n        }\n      }\n      if (debugMode) {\n        console.debug('Ngxthis -', 'Reached', bytesToMB(newSize), 'MB large. Trying another time after', i + 1, 'times');\n      }\n      myFile.image = compressedFile;\n    }\n    if (debugMode) {\n      console.debug('Ngxthis - Unexpected error');\n    }\n    throw {};\n  }\n}\nclass NgxImageCompressService {\n  constructor(rendererFactory) {\n    this.DOC_ORIENTATION = DOC_ORIENTATION;\n    this.render = rendererFactory.createRenderer(null, null);\n    this.imageCompress = new ImageCompress();\n  }\n  /**\n   * helper to evaluate the compression rate\n   * @param imgString the image in base64 string format\n   */\n  byteCount(image) {\n    return this.imageCompress.byteCount(image);\n  }\n  /**\n   * Get the correct Orientation value from image tags\n   */\n  getOrientation(file) {\n    return this.imageCompress.getOrientation(file);\n  }\n  /**\n   * return a promise with the new image data and image orientation\n   * Nothing happen if no file have been selected\n   */\n  uploadFile() {\n    return this.imageCompress.uploadFile(this.render, false);\n  }\n  /**\n   * return a promise with an array of image data and image orientation\n   * Nothing happen if no files have been selected\n   */\n  uploadMultipleFiles() {\n    return this.imageCompress.uploadFile(this.render, true);\n  }\n  /**\n   * return a promise with the new image data and image orientation\n   * the promise will reject if no file have been selected\n   */\n  uploadFileOrReject() {\n    return this.imageCompress.uploadFile(this.render, false, true);\n  }\n  /**\n   * return a promise with an array of image data and image orientation\n   * the promise will reject if no files have been selected\n   */\n  uploadMultipleFilesOrReject() {\n    return this.imageCompress.uploadFile(this.render, true, true);\n  }\n  /**\n  * perform a compression from the given DataUrl (string), provided by the uploadFile, or uploadMultipleFiles method\n  *\n  *\n  | Parameter   | Type   | Description                                                                       |\n  | ----------- | ------ | --------------------------------------------------------------------------------- |\n  | image       | string | DataUrl (string) representing the image                                           |\n  | orientation | number | EXIF Orientation value using the DOC_ORIENTATION enum value                       |\n  | ratio       | number | Maximum scale factor as a percentage (optional, default: 50) <sup>[1](#fn1)</sup> |\n  | quality     | number | JPEG quality factor as a percentage (optional, default: 50) <sup>[2](#fn2)</sup>  |\n  | maxwidth    | number | Maximum width in pixels if you need to resize (optional, default: 0 - no resize)  |\n  | maxheight   | number | Maximum height in pixels if you need to resize (optional, default: 0 - no resize) |\n  */\n  compressFile(image, orientation, ratio = 50, quality = 50, maxWidth = 0, maxHeight = 0) {\n    return this.imageCompress.compress(image, orientation, this.render, ratio, quality, maxWidth, maxHeight);\n  }\n  /**\n   * Most simple function to use here.\n   * Perform an upload and return an image dataUrl (string format) with a maximum size, given in *MegaBytes*\n   * If the size can't be reached, the best that can be reached will be returned in promise *rejection*\n   * Put debugMode to true if you have some trouble to print some help using console.debug\n   */\n  uploadAndGetImageWithMaxSize(maxSizeMb = 1, debugMode = false, rejectOnCancel = false) {\n    return this.imageCompress.uploadGetImageMaxSize(maxSizeMb, debugMode, this.render, rejectOnCancel).then(uploadResponse => uploadResponse.image).catch(e => {\n      throw e.image;\n    });\n  }\n  /**\n   * Same as before, but return more informations (file name...)\n   */\n  uploadAndGetImageWithMaxSizeAndMetas(maxSizeMb = 1, debugMode = false, rejectOnCancel = false) {\n    return this.imageCompress.uploadGetImageMaxSize(maxSizeMb, debugMode, this.render, rejectOnCancel);\n  }\n  /**\n   * Not handling the upload, you need to provide the file and the orientation by yourself\n   */\n  getImageWithMaxSizeAndMetas(file, maxSizeMb = 1, debugMode = false) {\n    return this.imageCompress.getImageMaxSize(file, maxSizeMb, debugMode, this.render);\n  }\n  static {\n    this.ɵfac = function NgxImageCompressService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxImageCompressService)(i0.ɵɵinject(i0.RendererFactory2));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxImageCompressService,\n      factory: NgxImageCompressService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageCompressService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i0.RendererFactory2\n  }], null);\n})();\nclass NgxImageCaptureComponent {\n  constructor() {\n    this.imageCaptured = new EventEmitter();\n    this.errorCapture = new EventEmitter();\n    this.videoElement = null;\n    this.videoStream = ViewChild('video', {\n      static: false\n    });\n    this.streamOpened = false;\n  }\n  startVideoCapture() {\n    this.streamOpened = true;\n    const constraints = {\n      audio: false,\n      video: {\n        width: {\n          ideal: 1920\n        },\n        height: {\n          ideal: 1080\n        },\n        facingMode: {\n          ideal: 'user'\n        }\n      }\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      this.videoStream = stream;\n      setTimeout(() => {\n        if (this.videoElement && this.videoElement.nativeElement) {\n          this.videoElement.nativeElement.srcObject = stream;\n        }\n      }, 100);\n    }).catch(error => {\n      this.errorCapture.emit(`Ngx Image Compress: Could not access the camera. ${error}`);\n      this.streamOpened = true;\n    });\n  }\n  acquireImage() {\n    const canvas = document.createElement('canvas');\n    const video = this.videoElement && this.videoElement.nativeElement;\n    if (!video) {\n      this.errorCapture.emit('Ngx Image Compress - Error in acquisition of video element.');\n      this.streamOpened = false;\n      return;\n    }\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const context2d = canvas.getContext('2d');\n    if (context2d) context2d.drawImage(video, 0, 0);\n    const newImage = canvas.toDataURL('jpg', 95);\n    if (this.videoStream) {\n      this.videoStream.getVideoTracks().forEach(track => track.stop());\n    }\n    this.imageCaptured.emit(newImage);\n    this.streamOpened = false;\n  }\n  static {\n    this.ɵfac = function NgxImageCaptureComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxImageCaptureComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgxImageCaptureComponent,\n      selectors: [[\"ngx-image-capture\"]],\n      viewQuery: function NgxImageCaptureComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.videoElement = _t.first);\n        }\n      },\n      outputs: {\n        imageCaptured: \"imageCaptured\",\n        errorCapture: \"errorCapture\"\n      },\n      ngContentSelectors: _c2,\n      decls: 3,\n      vars: 3,\n      consts: [[\"video\", \"\"], [3, \"click\", 4, \"ngIf\"], [\"autoplay\", \"\", 4, \"ngIf\"], [3, \"click\"], [\"autoplay\", \"\"]],\n      template: function NgxImageCaptureComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c1);\n          i0.ɵɵtemplate(0, NgxImageCaptureComponent_span_0_Template, 2, 0, \"span\", 1)(1, NgxImageCaptureComponent_span_1_Template, 2, 0, \"span\", 1)(2, NgxImageCaptureComponent_video_2_Template, 2, 0, \"video\", 2);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", !ctx.streamOpened);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.streamOpened);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.streamOpened);\n        }\n      },\n      dependencies: [i1.NgIf],\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageCaptureComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-image-capture',\n      template: `\n        <span (click)=\"startVideoCapture()\" *ngIf=\"!streamOpened\">\n            <ng-content select=\"[openStreamBtn]\"></ng-content>\n        </span>\n        <span (click)=\"acquireImage()\" *ngIf=\"streamOpened\">\n            <ng-content select=\"[acquireImageBtn]\"></ng-content>\n        </span>\n        <video #video autoplay *ngIf=\"streamOpened\"></video>\n    `\n    }]\n  }], null, {\n    imageCaptured: [{\n      type: Output\n    }],\n    errorCapture: [{\n      type: Output\n    }],\n    videoElement: [{\n      type: ViewChild,\n      args: ['video', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass NgxImageCaptureModule {\n  static {\n    this.ɵfac = function NgxImageCaptureModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxImageCaptureModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxImageCaptureModule,\n      declarations: [NgxImageCaptureComponent],\n      imports: [CommonModule],\n      exports: [NgxImageCaptureComponent]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageCaptureModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxImageCaptureComponent],\n      imports: [CommonModule],\n      exports: [NgxImageCaptureComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-image-compress\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DOC_ORIENTATION, NgxImageCaptureComponent, NgxImageCaptureModule, NgxImageCompressService };\n"],
  "mappings": "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",
  "names": ["DOC_ORIENTATION"]
}
